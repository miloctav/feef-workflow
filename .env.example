# ============================================
# FEEF Workflow - Environment Variables Reference
# ============================================
# This file documents all environment variables used in the application
#
# For actual usage:
# - Development: Copy .env.development to .env
# - Production: Use scripts/setup-env.sh to generate .env interactively
#
# Legend:
# [REQUIRED] - Must be set for the application to work
# [OPTIONAL] - Can be omitted, has default value
# [AUTO] - Auto-generated by setup script
# [DEV] - Development only
# [PROD] - Production only

# ============================================
# PostgreSQL Database Configuration
# ============================================

# [REQUIRED] Database name
# Default: feef_db
POSTGRES_DB=feef_db

# [REQUIRED] Database user
# Default: feef_user
POSTGRES_USER=feef_user

# [REQUIRED] Database password
# Production: Use strong password (20+ characters, mixed case, numbers, symbols)
# Development: Can use simple password
POSTGRES_PASSWORD=change_me_in_production

# [REQUIRED] Full database connection URL
# Format: postgresql://[user]:[password]@[host]:[port]/[database]
# Development: Use localhost:54320 (exposed port)
# Production: Use postgres:5432 (internal Docker network)
DATABASE_URL=postgresql://feef_user:change_me_in_production@localhost:54320/feef_db

# ============================================
# MinIO Object Storage Configuration
# ============================================

# [REQUIRED] MinIO admin username
# Production: Change from default
# Default: minioadmin
MINIO_ROOT_USER=minioadmin

# [REQUIRED] MinIO admin password
# Production: Use strong password (16+ characters)
# Default: minioadmin
MINIO_ROOT_PASSWORD=change_me_in_production

# [REQUIRED] MinIO server endpoint
# Development: localhost
# Production: minio (Docker service name)
MINIO_ENDPOINT=localhost

# [REQUIRED] MinIO server port
# Default: 9000
MINIO_PORT=9000

# [REQUIRED] Use SSL for MinIO connection
# Development: false
# Production: false (SSL handled by nginx)
MINIO_USE_SSL=false

# [REQUIRED] MinIO bucket name for storing files
# Default: feef-storage
MINIO_BUCKET=feef-storage

# ============================================
# Domain & SSL Configuration
# ============================================

# [PROD] [REQUIRED] Your domain name (without https://)
# Used for SSL certificate generation
# Example: feef-workflow.com
DOMAIN=your-domain.com

# [PROD] [REQUIRED] Your email for Let's Encrypt notifications
# You'll receive SSL certificate expiry warnings at this address
# Example: admin@your-domain.com
EMAIL=your-email@example.com

# ============================================
# Security & Authentication
# ============================================

# [REQUIRED] [AUTO] Session encryption password (nuxt-auth-utils)
# MUST be at least 32 characters long
# Production: Auto-generated by setup script
# Development: Can use simple password
# Generate with: openssl rand -base64 32
NUXT_SESSION_PASSWORD=a-random-password-with-at-least-32-characters

# [REQUIRED] [AUTO] JWT secret for password reset tokens
# MUST be at least 32 characters long
# Production: Auto-generated by setup script
# Development: Can use simple password
# Generate with: openssl rand -base64 32
JWT_SECRET=your-jwt-secret-with-at-least-32-characters

# [REQUIRED] Seed token for API seed endpoint
# Used to protect the POST /api/seed endpoint
# This endpoint creates an admin FEEF account (email: maxime@miloctav.fr, password: admin)
# Production: Use a strong, unique token (generate with: openssl rand -hex 32)
# Development: Can use simple token like "dev_seed_token_12345"
# Usage: curl -X POST http://your-domain/api/seed -H "x-seed-token: your_token"
SEED_TOKEN=your-secure-seed-token-here

# ============================================
# Email Service (Resend)
# ============================================

# [OPTIONAL] Resend API key
# Get your API key from https://resend.com/api-keys
# If not set and DEV_MODE=false, email features won't work
RESEND_API_KEY=re_your_api_key_here

# [OPTIONAL] Email sender address
# Must be a verified domain in Resend
# Format: Display Name <email@domain.com>
# Development: Use onboarding@resend.dev for testing
# Production: Use your domain (e.g., noreply@your-domain.com)
RESEND_FROM_EMAIL=FEEF Workflow <noreply@your-domain.com>

# ============================================
# Development Mode
# ============================================

# [DEV] [OPTIONAL] Enable development features
# When set to 'true':
# - No emails are sent when creating accounts
# - New accounts are automatically activated (isActive=true)
# - Default password is 'password' for all new accounts
# - Useful for local testing without email service
#
# IMPORTANT: MUST be 'false' or omitted in production!
# Default: false
# DEV_MODE=true

# ============================================
# How to use this file
# ============================================
#
# Local Development:
# 1. Copy .env.development to .env
# 2. Adjust values if needed (database port, MinIO credentials, etc.)
# 3. Run: npm run dev
#
# Production Deployment:
# 1. Run: scripts/setup-env.sh
# 2. Follow interactive prompts to set secure values
# 3. Script auto-generates secrets and creates .env
# 4. Deploy with: docker compose up -d
#
# Adding new variables:
# 1. Add to .env.development (for dev)
# 2. Add to .env.production.example (for prod template)
# 3. Document here in .env.example
# 4. Update docker-compose.yml if needed
# 5. When deploying: update.sh will detect and prompt for new variables
