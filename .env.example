# ============================================
# FEEF Workflow - Environment Variables Reference
# ============================================
# This file documents all environment variables used in the application
#
# For actual usage:
# - Development: Copy .env.development to .env
# - Production: Use scripts/setup-env.sh to generate .env interactively
#
# Legend:
# [REQUIRED] - Must be set for the application to work
# [OPTIONAL] - Can be omitted, has default value
# [AUTO] - Auto-generated by setup script
# [DEV] - Development only
# [PROD] - Production only

# ============================================
# Runtime Configuration System
# ============================================
# All environment variables below are loaded into Nuxt's runtimeConfig
# at application startup. Variables are accessed via useRuntimeConfig()
# in server code instead of process.env for better type safety.
#
# Mapping to runtimeConfig:
# - NUXT_DATABASE_URL     → config.databaseUrl
# - NUXT_GARAGE_ENDPOINT  → config.garage.endpoint
# - NUXT_GARAGE_REGION    → config.garage.region
# - NUXT_GARAGE_ACCESS_KEY → config.garage.accessKey
# - NUXT_GARAGE_SECRET_KEY → config.garage.secretKey
# - NUXT_GARAGE_BUCKET    → config.garage.bucket
# - NUXT_JWT_SECRET       → config.jwtSecret
# - NUXT_SEED_TOKEN       → config.seedToken
# - NUXT_RESEND_API_KEY   → config.resend.apiKey
# - NUXT_RESEND_FROM_EMAIL → config.resend.fromEmail
# - NUXT_DEV_MODE         → config.devMode (boolean)
#
# Configuration defined in: nuxt.config.ts (runtimeConfig section)
# Type definitions in: index.d.ts (RuntimeConfig interface)

# ============================================
# PostgreSQL Database Configuration
# ============================================

# [REQUIRED] Database name
# Default: feef_db
POSTGRES_DB=feef_db

# [REQUIRED] Database user
# Default: feef_user
POSTGRES_USER=feef_user

# [REQUIRED] Database password
# Production: Use strong password (20+ characters, mixed case, numbers, symbols)
# Development: Can use simple password
POSTGRES_PASSWORD=change_me_in_production

# [REQUIRED] Full database connection URL
# Format: postgresql://[user]:[password]@[host]:[port]/[database]
# Development: Use localhost:54320 (exposed port)
# Production: Use postgres:5432 (internal Docker network)
NUXT_DATABASE_URL=postgresql://feef_user:change_me_in_production@localhost:54320/feef_db

# ============================================
# Garage Object Storage Configuration (S3-compatible)
# ============================================

# [REQUIRED] [AUTO] Garage S3 API endpoint
# Development: http://localhost:3900
# Production: http://garage:3900 (Docker service name)
# Note: Garage exposes S3-compatible API on port 3900
NUXT_GARAGE_ENDPOINT=http://localhost:3900

# [REQUIRED] Garage S3 region name
# Default: garage
# Note: This is a virtual region name, can be any string
NUXT_GARAGE_REGION=garage

# [REQUIRED] [AUTO] Garage access key (S3 API credentials)
# Generated by the garage-init service during first startup
# On first run: docker compose up garage-init will display credentials
# Copy the generated access key here
NUXT_GARAGE_ACCESS_KEY=to_be_generated_by_init_script

# [REQUIRED] [AUTO] Garage secret key (S3 API credentials)
# Generated by the garage-init service during first startup
# Copy the generated secret key here
NUXT_GARAGE_SECRET_KEY=to_be_generated_by_init_script

# [REQUIRED] Garage bucket name for storing files
# Default: feef-storage
# Note: Bucket is automatically created by garage-init service
NUXT_GARAGE_BUCKET=feef-storage

# [REQUIRED] Garage API key name
# Default: feef-app-key
# Note: Used by garage-init to create the key
GARAGE_KEY_NAME=feef-app-key

# ============================================
# Garage Internal Configuration (Docker only)
# ============================================
# These variables are used by the Garage server itself
# Only needed when running Garage via docker-compose

# [REQUIRED] [AUTO] Garage RPC secret (cluster communication)
# Must be at least 32 characters (hex)
# Production: Auto-generated by setup script
# Generate with: openssl rand -hex 32
GARAGE_RPC_SECRET=change_me_in_production_use_openssl_rand_hex_32

# [REQUIRED] [AUTO] Garage admin API token
# Used to access Garage admin API on port 3903
# Production: Auto-generated by setup script
# Generate with: openssl rand -base64 32
GARAGE_ADMIN_TOKEN=change_me_in_production_use_openssl_rand_base64_32

# [REQUIRED] [AUTO] Garage metrics API token
# Used to access Garage metrics endpoint
# Production: Auto-generated by setup script
# Generate with: openssl rand -base64 32
GARAGE_METRICS_TOKEN=change_me_in_production_use_openssl_rand_base64_32

# ============================================
# Domain & SSL Configuration
# ============================================

# [PROD] [REQUIRED] Your domain name (without https://)
# Used for SSL certificate generation
# Example: feef-workflow.com
DOMAIN=your-domain.com

# [PROD] [REQUIRED] Your email for Let's Encrypt notifications
# You'll receive SSL certificate expiry warnings at this address
# Example: admin@your-domain.com
EMAIL=your-email@example.com

# ============================================
# Security & Authentication
# ============================================

# [REQUIRED] [AUTO] Session encryption password (nuxt-auth-utils)
# MUST be at least 32 characters long
# Production: Auto-generated by setup script
# Development: Can use simple password
# Generate with: openssl rand -base64 32
NUXT_SESSION_PASSWORD=a-random-password-with-at-least-32-characters

# [REQUIRED] [AUTO] JWT secret for password reset tokens
# MUST be at least 32 characters long
# Production: Auto-generated by setup script
# Development: Can use simple password
# Generate with: openssl rand -base64 32
NUXT_JWT_SECRET=your-jwt-secret-with-at-least-32-characters

# [REQUIRED] Seed token for API seed endpoint
# Used to protect the POST /api/seed endpoint
# This endpoint creates an admin FEEF account (email: maxime@miloctav.fr, password: admin)
# Production: Use a strong, unique token (generate with: openssl rand -hex 32)
# Development: Can use simple token like "dev_seed_token_12345"
# Usage: curl -X POST http://your-domain/api/seed -H "x-seed-token: your_token"
NUXT_SEED_TOKEN=your-secure-seed-token-here

# ============================================
# Email Service (Resend)
# ============================================

# [OPTIONAL] Resend API key
# Get your API key from https://resend.com/api-keys
# If not set and NUXT_DEV_MODE=false, email features won't work
NUXT_RESEND_API_KEY=re_your_api_key_here

# [OPTIONAL] Email sender address
# Must be a verified domain in Resend
# Format: Display Name <email@domain.com>
# Development: Use onboarding@resend.dev for testing
# Production: Use your domain (e.g., noreply@your-domain.com)
NUXT_RESEND_FROM_EMAIL=FEEF Workflow <noreply@your-domain.com>

# ============================================
# Development Mode
# ============================================

# [DEV] [OPTIONAL] Enable development features
# When set to 'true':
# - No emails are sent when creating accounts
# - New accounts are automatically activated (isActive=true)
# - Default password is 'password' for all new accounts
# - Useful for local testing without email service
#
# IMPORTANT: MUST be 'false' or omitted in production!
# Default: false
# NUXT_DEV_MODE=true

# ============================================
# How to use this file
# ============================================
#
# Local Development:
# 1. Copy .env.development to .env
# 2. Adjust values if needed (database port, Garege credentials, etc.)
# 3. Run: npm run dev
#
# Production Deployment:
# 1. Run: scripts/setup-env.sh
# 2. Follow interactive prompts to set secure values
# 3. Script auto-generates secrets and creates .env
# 4. Deploy with: docker compose up -d
#
# Adding new variables:
# 1. Add to .env.development (for dev)
# 2. Add to .env.production.example (for prod template)
# 3. Document here in .env.example
# 4. Update docker-compose.yml if needed
# 5. When deploying: update.sh will detect and prompt for new variables
