services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: feef-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-feef_db}
      POSTGRES_USER: ${POSTGRES_USER:-feef_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - feef-network
    # Ports exposés seulement pour le développement/debug
    # En production, supprimez ces lignes pour plus de sécurité
    # ports:
    #   - "54320:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-feef_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: feef-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-change_me_in_production}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - feef-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nuxt Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: feef-app
    restart: unless-stopped
    # Load environment variables from .env file
    env_file:
      - .env
    environment:
      # Override/force specific values for Docker environment
      NODE_ENV: production
      # Database connection variables for Docker network
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      # Database URL (constructed from .env variables) - override dev value
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # MinIO endpoint (use container name for internal network)
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      # All other variables (POSTGRES_*, MINIO_*, NUXT_SESSION_PASSWORD, JWT_SECRET,
      # RESEND_*, DEV_MODE) are loaded from .env file via env_file directive
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - feef-network
    expose:
      - "3000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: feef-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - app
    networks:
      - feef-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Let's Encrypt Certbot
  certbot:
    image: certbot/certbot
    container_name: feef-certbot
    restart: unless-stopped
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # pgAdmin - Database Management Tool
  # Access via http://your-ip:5050
  # Login with PGADMIN_EMAIL and PGADMIN_PASSWORD from .env
  # IMPORTANT: Restrict access or disable this service after initial setup in production
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: feef-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@feef.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-changeme}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - feef-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local
  pgadmin_data:
    driver: local

networks:
  feef-network:
    driver: bridge
